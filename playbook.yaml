---
- hosts: commandline
  tasks:
  - name: install EPEL (if redhat)
    package:
      name:
        - epel-release
      state: present
    become: yes
    when: ansible_os_family == 'RedHat'
  - name: install commonly-used software
    package:
      name:
        - git
        - emacs
        - htop
        - ntp
        - awscli
        - "{{ 'postgresql'   if ansible_os_family == 'RedHat' else 'postgresql-client' }}"
        - "{{ 'python2-pip'  if ansible_os_family == 'RedHat' else 'python-pip' }}"
        - "{{ 'python36-pip' if ansible_os_family == 'RedHat' else 'python3-pip' }}"
        - "{{ 'mlocate'      if ansible_os_family == 'RedHat' else 'locate' }}"
      state: present
    become: yes
  - name: ensure /usr/local/bin is in PATH (for normal login)
    copy:
      src: /home/alex/code/apollo_ansible/custom_path.sh
      dest: /etc/profile.d/custom_path.sh
      mode: 0644
    become: yes
  - name: ensure /usr/local/bin is in PATH (for sudo)
    copy:
      content: "Defaults	secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n"
      # If you mess that up, see:
      #   https://askubuntu.com/questions/73864/how-to-modify-an-invalid-etc-sudoers-file
      #   https://askubuntu.com/questions/799669/etc-sudoers-file-corrupted-and-i-cant-run-pkexec-visudo-over-ssh
      dest: /etc/sudoers.d/50-custom-path
      mode: 0440
    become: yes
  # TODO?: may need to reset_connection here.
  - name: update pip
    pip:
      name: pip
      state: latest
      executable: "{{ item }}"
    with_items:
      - pip2
      - pip3
    become: yes
  - name: enable ntpd
    service:
      name: "{{ 'ntpd'  if ansible_os_family == 'RedHat' else 'ntp' }}"
      enabled: yes
      state: started
    become: yes
  #### Security stuff: ####
  - name: Keep postfix stopped
    service:
      name: postfix
      state: stopped
    become: yes
  - name: Harden sysctl
    blockinfile:
      path: /etc/sysctl.conf
      block: |
        fs.suid_dumpable = 0
        kernel.core_uses_pid = 1
        kernel.dmesg_restrict = 1
        kernel.kptr_restrict = 2
        kernel.yama.ptrace_scope = 2
        net.ipv4.conf.all.accept_redirects = 0
        net.ipv4.conf.all.send_redirects = 0
        net.ipv4.conf.default.accept_redirects = 0
        net.ipv4.conf.default.accept_source_route = 0
        net.ipv6.conf.all.accept_redirects = 0
        net.ipv6.conf.default.accept_redirects = 0
    become: yes
  - name: restrict umask
    copy:
      content: "umask 027\n"
      # TODO: that may actually be too restrictive
      dest: /etc/profile.d/custom_umask.sh
      # TODO: in Ubuntu we should set it in /etc/login.defs
      mode: 0644
    become: yes
  - name: install some security tools
    package:
      name:
        - fail2ban
        - clamav
      state: present
    become: yes
  - name: enable fail2ban jail(s)
    blockinfile:
      path: /etc/fail2ban/jail.d/from-ansible.conf
      mode: '644'
      create: yes
      block: |
        [sshd]
        enabled = true
    become: yes
    # TODO: enable more as needed
  - name: enable fail2ban
    service:
      name: fail2ban
      enabled: yes
      state: started
    become: yes
  # TODO: auto-update clamav data
  # TODO: Auter or unattended-upgrade/yum-cron.  careful not to clobber chrome
  # or auto-reboot a (local) machine.

- hosts: remote
  tasks:
  - import_tasks: alex_account.yaml
  - name: harden sshd
    copy:
      src: /home/alex/code/apollo_ansible/sshd_config
      dest: /etc/ssh/sshd_config
      mode: 0640
      force: yes
      backup: yes
    become: yes
    # TODO: restart sshd if file changed
    # TODO: similar for all hosts, not just remote.  (that config was based on RHEL template, need to compare to Debian.)
  - name: set hostname
    hostname:
      name: "{{ inventory_hostname }}"
    become: yes
  - name: set timezone
    timezone:
      name: America/New_York
    become: yes
  # - name: install ddclient
  #   # TODO: configure+start it
  #   package:
  #     name:
  #       - ddclient
  #     state: present
  #   become: yes
  # TODO: tmux, molly-guard, ...

- hosts: scripts
  tasks:
  - name: add grafana repository
    # TODO: https://grafana.com/docs/installation/debian/#apt-repository for deb version
    yum_repository:
      name: grafana
      description: grafana repo
      # enabled: yes
      baseurl: https://packages.grafana.com/oss/rpm
      repo_gpgcheck: yes
      gpgcheck: yes
      gpgkey: https://packages.grafana.com/gpg.key
      sslverify: yes
      sslcacert: /etc/pki/tls/certs/ca-bundle.crt
    become: yes
  - name: install grafana
    package:
      name:
        - grafana
      state: present
    become: yes
  - name: Keep grafana stopped, for now
    service:
      name: grafana-server
      state: stopped
    become: yes
  # TODO: grafana setup, tls, dns, etc.
  - import_tasks: s3.yaml
  - import_tasks: apollo_code.yaml

# - hosts: oauth
#   # remote_user: centos
#   # become: yes
#   tasks:
#   - name: ensure apache is at the latest version
#     yum:
#       name: httpd
#       state: latest
#     become: yes
#   # - name: write the apache config file
#   #   template:
#   #     src: /srv/httpd.j2
#   #     dest: /etc/httpd.conf
#   #   - name: ensure that postgresql is started
#   #     service:
#   #       name: postgresql
#   #       state: started

- hosts: databases
  vars:
    login_host: apollotestdb.cya9db53pp70.us-east-1.rds.amazonaws.com
    login_user: apollodevdb
    login_password: "{{ lookup('file', 'secrets/rds_password.txt') }}"
    ssl_mode: require  # or verify-ca / verify-full
  tasks:
  - import_tasks: db.yaml
# TODO: pg_dump "APOLLO_DB_NAME_HERE" > /some/backup/location/APOLLO_DB_NAME_HERE.dump

# TODO: latest version of stuff for test, pinned to some "latest working" for prod
